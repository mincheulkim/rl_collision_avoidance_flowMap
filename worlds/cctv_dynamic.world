show_clock 0
show_clock_interval 10000
resolution 0.2
threads 16
#threads 12  # 220819 for safe
# -1: for maximum run time
#speedup 20
speedup 5
#speedup 1
#speedup -1


define sicklaser ranger
(
  sensor(
    pose [ 0 0 0.1 0 ]    # laser position?
    fov 180
    range [ 0.0 6.0 ]     # min, max range
    samples 512
  )
  color "random"
  block( 
    points 4
    point[0] [0 0]
    point[1] [0 1]
    point[2] [1 1]
    point[3] [1 0]
    z [0 0.21]
  )
)


define floorplan model
(
  color "gray30"
  boundary 1   

  gui_nose 0
  gui_grid 0
  gui_move 1
  gui_outline 0
  gripper_return 0
  fiducial_return 0
  ranger_return 1.000
  obstacle_return 1
)

floorplan
(
  name "CCTV_dynamic"
  size [22.000 22.000 0.800]            # floor size
  pose [0.000 0.000 0.000 0.000]
  bitmap "cctv_dynamic.png"
)

window
(
  size [799 800]         # (important) total window size
  
# Camera options 
  scale 35.000          
  #center [-2.661  -1.640]
  center [ 0.000  0.000]
  #rotate [ 0.000  -32.000 ]
  rotate [ 0.000  0.000 ]


# GUI options
  show_data 1
  show_flags 1
  show_blocks 1
  show_clock 1
  show_footprints 1
  show_grid 1
  show_trailarrows 0
  show_trailrise 0
  show_trailfast 0
  show_occupancy 0

)




define agent position
(
  # actual size
  #size [0.4 0.4 0.4] # sizes from MobileRobots' web site
  size [0.380 0.380 0.220] # sizes from MobileRobots' web site

  localization "gps"
  # the pioneer's center of rotation is offset from its center of area
  origin [0.000 0.000 0.000 0.000]

  # draw a nose on the robot so we can see which way it points
  gui_nose 1

  color "random"
  drive "diff"		 	# Differential steering model.
  obstacle_return 1           	# Can hit things.
  ranger_return 0.500            	# reflects sonar beams
  #ranger_return 1.000            	# reflects sonar beams
  blob_return 1               	# Seen by blobfinders  
  fiducial_return 1           	# Seen as "1" fiducial finders
  sicklaser(
	pose [ 0.000 0.000 0.000 0.000 ] 
  )
  
  # [ xmin xmax ymin ymax zmin zmax amin amax ]				
  # velocity_bounds [-0.5 0.5 0 0 0 0 -90.0 90.0 ]					
  # acceleration_bounds [-0.5 0.5 0 0 0 0 -90 90.0 ]
  )

define obstacle position
(
  color "random"
  ranger_return 1
  obstacle_return 1

)

# for init fixed pose start
# For robot(index=0)
agent( pose [9.00 9.00 0.00 90.00] name "robot" color "red")

# Total 10 humans
# Total 3 Groups
# ref. Don't be Rude! Learning Group-aware Policies for Robot Navigation
# Group 1: 5 humans
agent( pose [2.00 -8.00 0.00 45.00] color "yellow")   # human1, standing
agent( pose [7.00 10.50 0.00 270.00] color "yellow")  # human2, upper
agent( pose [-4.90 -2.00 0.00 0.00] color "yellow")  # human3, center LtoR
agent( pose [6.00 -4.50 0.00 90.00] color "yellow")  # human4, center LtoR
agent( pose [-10.50 -0.50 0.00 45.00] color "yellow")  # human5, left


#
#obstacle( pose [0 0 0.00 0]
#  size [0.7 0.7 0.8]
#  block(
#    points 16
#    point[0] [ 0.225 0.000 ]
#    point[1] [ 0.208 0.086 ]
#    point[2] [ 0.159 0.159 ]
#    point[3] [ 0.086 0.208 ]
#    point[4] [ 0.000 0.225 ]
#    point[5] [ -0.086 0.208 ]
#    point[6] [ -0.159 0.159 ]
#    point[7] [ -0.208 0.086 ]
#    point[8] [ -0.225 0.000 ]
#    point[9] [ -0.208 -0.086 ]
#    point[10] [ -0.159 -0.159 ]
#    point[11] [ -0.086 -0.208 ]
#    point[12] [ -0.000 -0.225 ]
#    point[13] [ 0.086 -0.208 ]
#    point[14] [ 0.159 -0.159 ]
#    point[15] [ 0.208 -0.086 ]
#    z [0 0.1]
#  )
#)



